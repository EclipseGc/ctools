<?php
// $Id$
/**
 * @file
 * Tests for different parts of the ctools plugin system.
 */

/**
 * Test menu links depending on user permissions.
 */
class CtoolsPluginsGetInfoTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Get plugin info',
      'description' => 'Verify that plugin type definitions can properly set and overide values.',
      'group' => 'Chaos Tools Suite',
    );
  }

  function setUp() {
    // Additionally enable contact module.
    parent::setUp('ctools', 'ctools_plugin_test');
  }

  protected function assertPluginFunction($module, $type, $id, $function = 'function') {
    $func = ctools_plugin_load_function($module, $type, $id, $function);
    $this->assertTrue(function_exists($func), t('Plugin @plugin of plugin type @module:@type successfully retrieved @retrieved for @function.', array(
      '@plugin' => $id,
      '@module' => $module,
      '@type' => $type,
      '@function' => $function,
      '@retrieved' => $func,
    )));
  }

  protected function assertPluginClass($module, $type, $id, $class = 'handler') {
    $class_name = ctools_plugin_load_class($module, $type, $id, $class);
    $this->assertTrue(class_exists($class_name), t('Plugin @plugin of plugin type @module:@type successfully retrieved @retrieved for @class.', array(
      '@plugin' => $id,
      '@module' => $module,
      '@type' => $type,
      '@class' => $class,
      '@retrieved' => $class_name,
    )));
  }

  /**
   * Helper function that runs some generalized tests for plugin loading.

   * @TODO finish refactoring this.
   *
   * @param $cached
   * Toggles whether the tests are run against a cached api or uncached api.
   */
  function PluginLoadingTests($cached = true) {

    ctools_include('plugins');
    $module = 'ctools_plugin_test';
    $type = $cached ? 'cached' : 'not_cached';

    // Test function retrieval for plugins using different definition methods.
    $this->assertPluginFunction($module, $type, 'plugin_array', 'function');
    $this->assertPluginFunction($module, "big_hook_$type", 'test1', 'function');

    // Test class retrieval for plugins using different definition methods.
    $base = $cached ? 'ctoolsCached' : 'ctoolsNotCached';
    $this->assertPluginClass($module, $type, 'plugin_array', 'handler');
    $this->assertPluginClass($module, $type, 'plugin_array2', 'handler');
    // @todo finish setting this up.
//    $class = ctools_plugin_load_class($module, $type . '_hook', 'test1', 'handler');
//    $object = new $class();
//    $this->assertEqual("ctools_plugin_test_hook_${type}_test", $func, "Function for $type using hook definition retrieved.");

    // Check that our cache is stored
    // @TODO move these to a different test method.
//    $cache = cache_get("plugins:$module:$type");
//    $test = !empty($cache->data)
//      && sizeof($cache->data) == 2;
//    $this->assertEqual($test, $cached, 'Plugins from includes are being cached properly.');
//    $cache = cache_get("plugins:$module:${type}_hook");
//    $test = !empty($cache->data)
//      && sizeof($cache->data) == 1;
//    $this->assertEqual($test, $cached, 'Plugins from hooks are being cached properly.');
  }

  /**
   * Test that plugins are loaded correctly.
   */
  function testPluginLoading() {
    ctools_include('plugins');
    $module = 'ctools_plugin_test';
    $type = 'not_cached';

    // Test function retrieval for plugins using different definition methods.
    $this->assertPluginFunction($module, $type, 'plugin_array', 'function');
    $this->assertPluginFunction($module, "big_hook_$type", 'test1', 'function');

    // Test class retrieval for plugins using different definition methods.
    $this->assertPluginClass($module, $type, 'plugin_array', 'handler');
    $this->assertPluginClass($module, $type, 'plugin_array2', 'handler');

    $module = 'ctools_plugin_test';
    $type = 'cached';

    // Test function retrieval for plugins using different definition methods.
    $this->assertPluginFunction($module, $type, 'plugin_array', 'function');
    $this->assertPluginFunction($module, "big_hook_$type", 'test1', 'function');

    // Test class retrieval for plugins using different definition methods.
    $this->assertPluginClass($module, $type, 'plugin_array', 'handler');
    $this->assertPluginClass($module, $type, 'plugin_array2', 'handler');
  }
}
